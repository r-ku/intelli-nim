/*
 *    Intellij platform plugin which adds support Nim programming language
 *    Copyright (C) 2015  intelli-nim developers
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 */
{
    generate=[names="long"]

    parserClass="nim.grammar.parser.NimGrammarParser"
    parserUtilClass="nim.grammar.parser.NimParserUtil"

    implements="nim.grammar.parser.psi.NimCompositeElement"
    extends="nim.grammar.parser.psi.impl.NimCompositeElementImpl"

    psiClassPrefix="Bnf"
    psiImplClassSuffix="Impl"
    psiPackage="nim.grammar.parser.psi"
    psiImplPackage="nim.grammar.parser.psi.impl"
    //psiImplUtilClass="nim.grammar.parser.psi.impl.GrammarPsiImplUtil"

    elementTypeHolderClass="nim.grammar.parser.psi.NimTypes"
    elementTypePrefix=""
    elementTypeClass="nim.grammar.parser.psi.NimElementType"
    tokenTypeClass="nim.grammar.parser.psi.NimTokenType"

    tokens = [
        // After generating flex lexer delete this section somewhere after <YYINITIAL>
        DIGIT           = 'regexp:[0-9]'
        HEXDIGIT        = 'regexp:{DIGIT}|[A-F]|[a-f]'
        OCTDIGIT        = 'regexp:[0-7]'
        BINDIGIT        = 'regexp:[0-1]'
        HEX_LIT         = 'regexp:0(x|X){HEXDIGIT}(_{HEXDIGIT})*'
        DEC_LIT         = 'regexp:-?{DIGIT}(_{DIGIT})*'
        OCT_LIT         = 'regexp:0o{OCTDIGIT}(_{OCTDIGIT})*'
        BIN_LIT         = 'regexp:0(b|B){BINDIGIT}(_{BINDIGIT})*'
        EXPONENT        = 'regexp:(e|E)[+-]{DIGIT}(_{DIGIT})*'
        SYM_CHARS       = 'regexp:[a-zA-Z0-9\x80-\xFF_]+'
        SYM_START_CHARS = 'regexp:[a-zA-Z\x80-\xFF]+'
        //////////////////////////////////////////////////////////////////////////////

//        INVALID       = "tkInvalid"
//        EOF           = "[EOF]"
        SYMBOL         = "regexp:{SYM_START_CHARS}{SYM_CHARS}"
        ADDR           = "addr"
        AND            = "and"
        AS             = "as"
        ASM            = "asm"
        ATOMIC         = "atomic"
        BIND           = "bind"
        BLOCK          = "block"
        BREAK          = "break"
        CASE           = "case"
        CAST           = "cast"
        CONCEPT        = "concept"
        CONST          = "const"
        CONTINUE       = "continue"
        CONVERTER      = "converter"
        DEFER          = "defer"
        DISCARD        = "discard"
        DISTINCT       = "distinct"
        DIV            = "div"
        DO             = "do"
        ELIF           = "elif"
        ELSE           = "else"
        END            = "end"
        ENUM           = "enum"
        EXCEPT         = "except"
        EXPORT         = "export"
        FINALLY        = "finally"
        FOR            = "for"
        FROM           = "from"
        FUNC           = "func"
        GENERIC        = "generic"
        IF             = "if"
        IMPORT         = "import"
        IN             = "in"
        INCLUDE        = "include"
        INTERFACE      = "interface"
        IS             = "is"
        ISNOT          = "isnot"
        ITERATOR       = "iterator"
        LET            = "let"
        MACRO          = "macro"
        METHOD         = "method"
        MIXIN          = "mixin"
        MOD            = "mod"
        NIL            = "nil"
        NOT            = "not"
        NOTIN          = "notin"
        OBJECT         = "object"
        OF             = "of"
        OR             = "or"
        OUT            = "out"
        PROC           = "proc"
        PTR            = "ptr"
        RAISE          = "raise"
        REF            = "ref"
        RETURN         = "return"
        SHL            = "shl"
        SHR            = "shr"
        STATIC         = "static"
        TEMPLATE       = "template"
        TRY            = "try"
        TUPLE          = "tuple"
        TYPE           = "type"
        USING          = "using"
        VAR            = "var"
        WHEN           = "when"
        WHILE          = "while"
        WITH           = "with"
        WITHOUT        = "without"
        XOR            = "xor"
        YIELD          = "yield"
        INTLIT         = "regexp:{HEX_LIT}|{DEC_LIT}|{OCT_LIT}|{BIN_LIT}"
        INT8LIT        = "regexp:{INTLIT}'[iI]8"
        INT16LIT       = "regexp:{INTLIT}'[iI]16"
        INT32LIT       = "regexp:{INTLIT}'[iI]32"
        INT64LIT       = "regexp:{INTLIT}'[iI]64"
        UINTLIT        = "regexp:{INTLIT}'[uU]"
        UINT8LIT       = "regexp:{UINTLIT}'[uU]8"
        UINT16LIT      = "regexp:{INTLIT}'[uU]16"
        UINT32LIT      = "regexp:{INTLIT}'[uU]32"
        UINT64LIT      = "regexp:{INTLIT}'[uU]64"
        FLOATLIT       = "regexp:-?{DIGIT}(_{DIGIT})*((.(_{DIGIT})*[EXPONENT])|{EXPONENT})"
        FLOAT32LIT     = "regexp:({HEX_LIT}|{FLOATLIT}|{DEC_LIT}|{OCT_LIT}|{BIN_LIT})'[fF]32"
        FLOAT64LIT     = "regexp:({HEX_LIT}|{FLOATLIT}|{DEC_LIT}|{OCT_LIT}|{BIN_LIT})'[fF]64"
        FLOAT128LIT    = "regexp:({HEX_LIT}|{FLOATLIT}|{DEC_LIT}|{OCT_LIT}|{BIN_LIT})'[fF]128"
        STRLIT         = 'regexp:"(\\"|\\[^"]|[^\\])*"'
        RSTRLIT        = "regexp:r{STRLIT}"
        TRIPLESTRLIT   = 'regexp:\"""(.|{EOL})*\"""'
//        GSTRLIT        = "tkGStrLit"
//        GTRIPLESTRLIT  = "tkGTripleStrLit"
//        CHARLIT        = "tkCharLit"
        PARLE          = "("
        PARRI          = ")"
        BRACKETLE      = "["
        BRACKETRI      = "]"
        CURLYLE        = "{"
        CURLYRI        = "}"
        BRACKETDOTLE   = "[."
        BRACKETDOTRI   = ".]"
        CURLYDOTLE     = "{."
        CURLYDOTRI     = ".}"
        PARDOTLE       = "(."
        PARDOTRI       = ".)"
        COMMA          = ","
        SEMICOLON      = ";"
        COLON          = ":"
        COLONCOLON     = "::"
        EQUALS         = "="
        DOT            = "."
        DOTDOT         = ".."
        OPR            = "regexp:[+-*/\\<>!?\^.|=%&$@~:\x80-\xFF]"
        COMMENT        = "regexp:#[^\r\n]*"
        ACCENT         = "`"
//        INFIXOPR       = "tkInfixOpr"
//        PREFIXOPR      = "tkPrefixOpr"
//        POSTFIXOPR     = "tkPostfixOpr"
    ]
}

input ::= (SYMBOL|ADDR|AND|AS|ASM|ATOMIC|BIND|BLOCK|BREAK|CASE|CAST|CONCEPT|CONST|CONTINUE|CONVERTER|DEFER|DISCARD|
DISTINCT|DIV|DO|ELIF|ELSE|END|ENUM|EXCEPT|EXPORT|FINALLY|FOR|FROM|FUNC|GENERIC|IF|IMPORT|IN|INCLUDE|INTERFACE|IS|ISNOT|
ITERATOR|LET|MACRO|METHOD|MIXIN|MOD|NIL|NOT|NOTIN|OBJECT|OF|OR|OUT|PROC|PTR|RAISE|REF|RETURN|SHL|SHR|STATIC|TEMPLATE|
TRY|TUPLE|TYPE|USING|VAR|WHEN|WHILE|WITH|WITHOUT|XOR|YIELD|INTLIT|INT8LIT|INT16LIT|INT32LIT|INT64LIT|UINTLIT|UINT8LIT|
UINT16LIT|UINT32LIT|UINT64LIT|FLOATLIT|FLOAT32LIT|FLOAT64LIT|FLOAT128LIT|STRLIT|RSTRLIT|TRIPLESTRLIT|PARLE|PARRI|
BRACKETLE|BRACKETRI|CURLYLE|CURLYRI|BRACKETDOTLE|BRACKETDOTRI|CURLYDOTLE|CURLYDOTRI|PARDOTLE|PARDOTRI|COMMA|SEMICOLON|
COLON|COLONCOLON|EQUALS|DOT|DOTDOT|OPR|COMMENT|ACCENT)*
